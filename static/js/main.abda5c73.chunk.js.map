{"version":3,"sources":["components/Piece.js","components/Tile.js","Constants.js","referee.js","components/Chessboard.js","App.js","reportWebVitals.js","index.js"],"names":["Piece","props","style","height","undefined","image","backgroundImage","className","white","backgroundColor","border","borderColor","borderWidth","width","green","Tile","number","HORIZONTAL","VERTICAL","GRIDSIZE","Position","x","y","this","samePosition","p1","p2","initialBoardState","castle","source","process","position","type","team","checked","enPassant","Referee","boardState","find","p","tileIsOccupied","tileIsOccupiedByOpponent","ep","pawnDirection","filter","push","multiplierX","multiplierY","isValidMove","length","initialPosition","desiredPosition","promoteRow","king","eKing","ePieces","findBlockers","blockablePositions","iDirect","jDirect","j","Math","abs","i","xCoord","yCoord","passedPosition","canBeBlocked","tileIsSafe","piece","activePiece","checkers","specialRow","tileIsEmptyOrOccupiedByOpponent","multiplier","container","display","flexWrap","Chessboard","board","useState","setActivePiece","pieces","setPieces","grabPosition","setGrabPosition","turn","setTurn","text","show","alert","setAlert","chessboardRef","useRef","referee","onShowAlert","map","h","hIndex","v","vIndex","sum","flexDirection","maxHeight","onMouseDown","e","element","target","classList","contains","chessboard","current","grabX","floor","clientX","offsetLeft","grabY","clientY","offsetTop","left","top","grabPiece","onMouseMove","minX","minY","maxX","clientWidth","maxY","clientHeight","movePiece","onMouseUp","currentPiece","isCastle","isEnPassant","isEnPassantMove","isPromotion","isCheck","isSelfCheck","isCheckMate","validMove","side","updatedPieces","reduce","results","check","removeProperty","value","dropPiece","ref","header","btnText","onClosePress","window","location","reload","pressCloseOnOutsideClick","showBorderBottom","alertStyles","right","headerStyles","textStyles","buttonStyles","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abda5c73.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Piece = (props)=> {\r\n  return (\r\n    <div style={{height: '68px'}}>\r\n      {\r\n        props.image !== undefined ? (\r\n          <div style={{\r\n            backgroundImage:`url(${props.image})`,\r\n          }}\r\n            className='chess-piece'\r\n          >\r\n          </div>\r\n        ) :\r\n        null\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Piece\r\n","import React from 'react'\r\nimport Piece from './Piece'\r\n\r\nconst white = {\r\n  backgroundColor: 'white',\r\n  border: 'solid',\r\n  borderColor: 'black',\r\n  borderWidth: 1,\r\n  height: '68px',\r\n  width: '68px',\r\n}\r\n\r\nconst green = {\r\n  backgroundColor: 'green',\r\n  border: 'solid',\r\n  borderColor: 'black',\r\n  borderWidth: 1,\r\n  height: '68px',\r\n  width: '68px',\r\n}\r\n\r\nconst Tile = (props)=> {\r\n  return (\r\n    <div style={props.number % 2 === 0 ? white : green}>\r\n      <Piece image={props.image}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tile\r\n","export const HORIZONTAL = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\nexport const VERTICAL = ['1', '2', '3', '4', '5', '6', '7', '8']\r\nexport const GRIDSIZE = 70\r\n//80\r\nclass Position {\r\n  constructor(x,y) {\r\n    this.x = x;\r\n    this.y = y\r\n  }\r\n}\r\nexport const samePosition = (p1, p2)=> {\r\n  return p1.x === p2.x && p1.y === p2.y\r\n}\r\n\r\nexport const initialBoardState = [\r\n  {\r\n    castle: true,\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_kdt60.png`,\r\n    position: new Position(4,7),\r\n    type: 'king',\r\n    team: 'ours',\r\n    checked: false,\r\n  },\r\n\r\n  {\r\n    castle: true,\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_klt60.png`,\r\n    position: new Position(4,0),\r\n    type: 'king',\r\n    team: 'opponent',\r\n    checked: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_qdt60.png`,\r\n    position: new Position(3,7),\r\n    type: 'queen',\r\n    team: 'ours',\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_qlt60.png`,\r\n    position: new Position(3,0),\r\n    type: 'queen',\r\n    team: 'opponent',\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_bdt60.png`,\r\n    position: new Position(2,7),\r\n    //x: 2,\r\n    //y:7,\r\n    type: 'bishop',\r\n    team: 'ours',\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_bdt60.png`,\r\n    position: new Position(5,7),\r\n    //x: 5,\r\n    //y:7,\r\n    type: 'bishop',\r\n    team: 'ours',\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_blt60.png`,\r\n    position: new Position(2,0),\r\n    //x: 2,\r\n    //y:0,\r\n    type: 'bishop',\r\n    team: 'opponent',\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_blt60.png`,\r\n    position: new Position(5,0),\r\n    //x: 5,\r\n    //y:0,\r\n    type: 'bishop',\r\n    team: 'opponent',\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_ndt60.png`,\r\n    position: new Position(1,7),\r\n    //x: 1,\r\n    //y:7,\r\n    type: 'knight',\r\n    team: 'ours',\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_ndt60.png`,\r\n    position: new Position(6,7),\r\n    //x: 6,\r\n    //y:7,\r\n    type: 'knight',\r\n    team: 'ours',\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_nlt60.png`,\r\n    position: new Position(1,0),\r\n    //x: 1,\r\n    //y:0,\r\n    type: 'knight',\r\n    team: 'opponent',\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_nlt60.png`,\r\n    position: new Position(6,0),\r\n    type: 'knight',\r\n    team: 'opponent',\r\n  },\r\n\r\n  {\r\n    castle: true,\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_rdt60.png`,\r\n    position: new Position(0,7),\r\n    type: 'rook',\r\n    team: 'ours',\r\n  },\r\n\r\n  {\r\n    castle: true,\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_rdt60.png`,\r\n    position: new Position(7,7),\r\n    type: 'rook',\r\n    team: 'ours',\r\n  },\r\n\r\n  {\r\n    castle: true,\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_rlt60.png`,\r\n    position: new Position(0,0),\r\n    type: 'rook',\r\n    team: 'opponent',\r\n  },\r\n\r\n  {\r\n    castle: true,\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_rlt60.png`,\r\n    position: new Position(7,0),\r\n    type: 'rook',\r\n    team: 'opponent',\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_pdt60.png`,\r\n    position: new Position(0,6),\r\n    //x: 0,\r\n    //y: 6,\r\n    type: 'pawn',\r\n    team: 'ours',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_pdt60.png`,\r\n    position: new Position(1,6),\r\n    //x: 1,\r\n    //y: 6,\r\n    type: 'pawn',\r\n    team: 'ours',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_pdt60.png`,\r\n    position: new Position(2,6),\r\n    //x: 2,\r\n    //y: 6,\r\n    type: 'pawn',\r\n    team: 'ours',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_pdt60.png`,\r\n    position: new Position(3,6),\r\n    //x: 3,\r\n    //y: 6,\r\n    type: 'pawn',\r\n    team: 'ours',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_pdt60.png`,\r\n    position: new Position(4,6),\r\n    //x: 4,\r\n    //y: 6,\r\n    type: 'pawn',\r\n    team: 'ours',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_pdt60.png`,\r\n    position: new Position(5,6),\r\n    //x: 5,\r\n    //y: 6,\r\n    type: 'pawn',\r\n    team: 'ours',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_pdt60.png`,\r\n    position: new Position(6,6),\r\n    //x: 6,\r\n    //y: 6,\r\n    type: 'pawn',\r\n    team: 'ours',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_pdt60.png`,\r\n    position: new Position(7,6),\r\n    //x: 7,\r\n    //y: 6,\r\n    type: 'pawn',\r\n    team: 'ours',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_plt60.png`,\r\n    position: new Position(0,1),\r\n    //x: 0,\r\n    //y: 1,\r\n    type: 'pawn',\r\n    team: 'opponent',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_plt60.png`,\r\n    position: new Position(1,1),\r\n    //x: 1,\r\n    //y: 1,\r\n    type: 'pawn',\r\n    team: 'opponent',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_plt60.png`,\r\n    position: new Position(2,1),\r\n    //x: 2,\r\n    //y: 1,\r\n    type: 'pawn',\r\n    team: 'opponent',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_plt60.png`,\r\n    position: new Position(3,1),\r\n    //x: 3,\r\n    //y: 1,\r\n    type: 'pawn',\r\n    team: 'opponent',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_plt60.png`,\r\n    position: new Position(4,1),\r\n    //x: 4,\r\n    //y: 1,\r\n    type: 'pawn',\r\n    team: 'opponent',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_plt60.png`,\r\n    position: new Position(5,1),\r\n    //x: 5,\r\n    //y: 1,\r\n    type: 'pawn',\r\n    team: 'opponent',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_plt60.png`,\r\n    position: new Position(6,1),\r\n    //x: 6,\r\n    //y: 1,\r\n    type: 'pawn',\r\n    team: 'opponent',\r\n    enPassant: false,\r\n  },\r\n\r\n  {\r\n    source: `${process.env.PUBLIC_URL}/assets/Chess_plt60.png`,\r\n    position: new Position(7,1),\r\n    //x: 7,\r\n    //y: 1,\r\n    type: 'pawn',\r\n    team: 'opponent',\r\n    enPassant: false,\r\n  },\r\n]\r\n","import {\r\n  samePosition,\r\n} from './Constants'\r\n\r\nexport default class Referee {\r\n\r\n  tileIsOccupied(position,boardState) {\r\n    const piece = boardState.find(p=> samePosition(p.position, position))\r\n    if (piece) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  tileIsOccupiedByOpponent(position,boardState, team) {\r\n    const piece = boardState.find(p=> samePosition(p.position, position) && p.team !== team)\r\n    if (piece) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  tileIsEmptyOrOccupiedByOpponent (position, boardState, team) {\r\n    return (\r\n      !this.tileIsOccupied(position, boardState) ||\r\n      this.tileIsOccupiedByOpponent(position, boardState, team))\r\n    }\r\n\r\n  tileIsSafe (position, boardState, team) {\r\n    const ep = []\r\n    let pawnDirection = team === 'ours' ? 1 : -1\r\n      boardState.filter(p => {\r\n        if (p.type === 'pawn' && p.team !== team) {\r\n          if (position.x - p.position.x === -1 && position.y - p.position.y === pawnDirection) {\r\n            ep.push(p)\r\n          } else if (position.x - p.position.x === 1 && position.y - p.position.y === pawnDirection) {\r\n            ep.push(p)\r\n          }\r\n        } else if (p.type === 'king' && p.team !== team) {\r\n          let multiplierX = (position.x < p.position.x) ? -1 : (position.x > p.position.x) ? 1 : 0\r\n          let multiplierY = (position.y < p.position.y) ? -1 : (position.y > p.position.y) ? 1 : 0\r\n          if (position.x - p.position.x === multiplierX && position.y - p.position.y === multiplierY) {\r\n            ep.push(p)\r\n          }\r\n        }\r\n       else if (this.isValidMove(p.position, position, p.type, p.team, boardState) === true && p.team !== team && p.type !== 'king') {\r\n        ep.push(p)\r\n      }\r\n      return null\r\n    })\r\n    if (ep.length > 0) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  isEnPassantMove(\r\n    initialPosition,\r\n    desiredPosition,\r\n    boardState,\r\n    team,\r\n    type\r\n  ) {\r\n    const pawnDirection = (team === 'ours') ? -1 : 1\r\n    if(type === 'pawn') {\r\n      if ((desiredPosition.x - initialPosition.x === -1 || desiredPosition.x -initialPosition.x === 1)\r\n      && desiredPosition.y -initialPosition.y === pawnDirection) {\r\n        const piece = boardState.find(p=> p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant)\r\n        if (piece) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  isPromotion(\r\n    initialPosition,\r\n    desiredPosition,\r\n    boardState,\r\n    team,\r\n    type\r\n  ) {\r\n    const pawnDirection = (team === 'ours') ? -1 : 1\r\n    const promoteRow = (team === 'ours') ? 0 : 7\r\n    if (type === 'pawn') {\r\n      if (initialPosition.y +  pawnDirection === promoteRow) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  isCheck(\r\n    initialPosition,\r\n    desiredPosition,\r\n    boardState,\r\n    team,\r\n    type,\r\n  ) {\r\n    const king = boardState.find(p=> p.team === team && p.type === 'king')\r\n    if (this.isValidMove(initialPosition, desiredPosition, type, team, boardState)) {\r\n      const eKing = boardState.find(p=> p.team !== team && p.type === 'king')\r\n      if (this.isValidMove(desiredPosition, eKing.position, type, team, boardState)) {\r\n        if (king.checked === true) {\r\n          const ePieces = boardState.filter(p=> {\r\n            return p.team !== team && this.isValidMove(p.position, king.position, p.type, p.team, boardState) === true\r\n          })\r\n          if (this.isValidMove(initialPosition, ePieces[0].position, type, team, boardState)) {\r\n            return true\r\n          }\r\n          return false\r\n        }\r\n        eKing.checked = true\r\n        eKing.castle = false\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  canBeBlocked(\r\n    initialPosition,\r\n    desiredPosition,\r\n    boardState,\r\n    team,\r\n    type\r\n  ) {\r\n    const king = boardState.find(p=> p.team !== team && p.type === 'king')\r\n    const findBlockers = []\r\n    boardState.filter(p=> {\r\n      if (p.team !== team && p.type !== 'king') {\r\n        const blockablePositions= {\r\n          x: king.position.x - desiredPosition.x,\r\n          y: king.position.y - desiredPosition.y\r\n        }\r\n          let iDirect = (blockablePositions.x === 0) ? 0 : blockablePositions.x < 0 ? -1 : 1\r\n          let jDirect = (blockablePositions.y === 0) ? 0 : blockablePositions.y < 0 ? -1 : 1\r\n          if (!samePosition(king.position, desiredPosition)) {\r\n            if(blockablePositions.x === 0) {\r\n              let i = 0\r\n              for (let j = 1; j < Math.abs(blockablePositions.y); j++) {\r\n                if (this.isValidMove(\r\n                  desiredPosition,\r\n                  {x: i*iDirect + (desiredPosition.x), y: j*jDirect + (desiredPosition.y)},\r\n                  type,\r\n                  team,\r\n                  boardState\r\n                )) {\r\n                  if (this.isValidMove(\r\n                    p.position,\r\n                    {x: i*iDirect + (desiredPosition.x), y: j*jDirect + (desiredPosition.y)},\r\n                    p.type,\r\n                    p.team,\r\n                    boardState,\r\n                    king.checked\r\n                  )){\r\n                    findBlockers.push(p)\r\n                    return true\r\n                  }\r\n                }\r\n              }\r\n            } else if (blockablePositions.y === 0) {\r\n              for (let i = 0; i < Math.abs(blockablePositions.x); i++) {\r\n                let j = 0\r\n                if (this.isValidMove(\r\n                  desiredPosition,\r\n                  {x: i*iDirect + (desiredPosition.x), y: j*jDirect + (desiredPosition.y)},\r\n                  type,\r\n                  team,\r\n                  boardState\r\n                )) {\r\n                  if (this.isValidMove(\r\n                    p.position,\r\n                    {x: i*iDirect + (desiredPosition.x), y: j*jDirect + (desiredPosition.y)},\r\n                    p.type,\r\n                    p.team,\r\n                    boardState,\r\n                    king.checked\r\n                  )){\r\n                    findBlockers.push(p)\r\n                    return true\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          for (let i = 0; i < Math.abs(blockablePositions.x); i++) {\r\n            for (let j = 0; j < Math.abs(blockablePositions.y); j++) {\r\n              if (this.isValidMove(\r\n                desiredPosition,\r\n                {x: i*iDirect + (desiredPosition.x), y: j*jDirect + (desiredPosition.y)},\r\n                type,\r\n                team,\r\n                boardState\r\n              )) {\r\n                if (this.isValidMove(\r\n                  p.position,\r\n                  {x: i*iDirect + (desiredPosition.x), y: j*jDirect + (desiredPosition.y)},\r\n                  p.type,\r\n                  p.team,\r\n                  boardState,\r\n                  king.checked\r\n                )){\r\n                  findBlockers.push(p)\r\n                  return true\r\n                }\r\n              }\r\n            }\r\n          }\r\n      }\r\n      return p\r\n    })\r\n    if (findBlockers.length > 0) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  isCheckMate(\r\n    initialPosition,\r\n    desiredPosition,\r\n    boardState,\r\n    team,\r\n    type\r\n  ) {\r\n    if (this.isValidMove(initialPosition, desiredPosition, type, team, boardState)) {\r\n      const eKing = boardState.find(p => p.team !== team && p.type === 'king')\r\n      if (this.isValidMove(desiredPosition, eKing.position, type, team, boardState)) {\r\n        for (let i = -1; i < 2; i++) {\r\n          for (let j = -1; j < 2; j++) {\r\n            let xCoord = i\r\n            let yCoord = j\r\n            let passedPosition = {x: eKing.position.x + (xCoord), y: eKing.position.y + (yCoord)}\r\n            if (!this.isValidMove(eKing.position, passedPosition, eKing.type, eKing.team, boardState)) {\r\n              if(!this.canBeBlocked(initialPosition, desiredPosition, boardState, team, type)) {\r\n                if (this.tileIsSafe(desiredPosition, boardState, team)) {\r\n                  return true\r\n                }\r\n                return false\r\n              }\r\n            } else if (this.isValidMove(eKing.position, passedPosition, eKing.type, eKing.team, boardState)) {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        return false\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  isCastle (initialPosition, desiredPosition, boardState, team, type, checked) {\r\n    if (type === 'king' && checked === false) {\r\n      if (Math.abs(initialPosition.x - desiredPosition.x) === 2 && (desiredPosition.y === initialPosition.y)) {\r\n        if (!this.tileIsOccupied(desiredPosition, boardState)) {\r\n          if (desiredPosition.x - initialPosition.x === -2){\r\n            for ( let i = 1; i < 3; i++) {\r\n              let passedPosition = {x: initialPosition.x -i, y: initialPosition.y}\r\n              if (this.tileIsSafe(passedPosition, boardState, team)) {\r\n                if (samePosition(passedPosition, desiredPosition)) {\r\n                  if (!this.tileIsOccupied({x:passedPosition.x - 1, y: passedPosition.y}, boardState)) {\r\n                    return true\r\n                  }\r\n                } else if (this.tileIsOccupied(passedPosition, boardState)) {\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          } else if (desiredPosition.x - initialPosition.x === 2) {\r\n            for ( let i = 1; i < 3; i++) {\r\n              let passedPosition = {x: initialPosition.x + i, y: initialPosition.y}\r\n              if (this.tileIsSafe(passedPosition, boardState, team)) {\r\n                if (samePosition(passedPosition, desiredPosition)) {\r\n                  if (!this.tileIsOccupied({x:passedPosition.x -1, y: passedPosition.y}, boardState)) {\r\n                    return true\r\n                  }\r\n                } else if (this.tileIsOccupied(passedPosition, boardState)) {\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  isSelfCheck (initialPosition, desiredPosition, boardState, team, type, checked) {\r\n    if (this.isValidMove(initialPosition, desiredPosition, type, team, boardState, checked)) {\r\n      const king = boardState.find(p=> p.team === team && p.type === 'king')\r\n      const ePieces = boardState.filter(piece => piece.team !== team)\r\n      const activePiece = type === 'king' ? king : boardState.find(p=> samePosition(p.position, initialPosition))\r\n      activePiece.position.x = desiredPosition.x\r\n      activePiece.position.y = desiredPosition.y\r\n      const checkers =[]\r\n        ePieces.filter(piece => {\r\n        if (this.isValidMove(piece.position, king.position, piece.type, piece.team, boardState)) {\r\n          if (samePosition(desiredPosition, piece.position)) {\r\n            return false\r\n          }\r\n          activePiece.position.x = initialPosition.x\r\n          activePiece.position.y = initialPosition.y\r\n          return checkers.push(piece)\r\n        }\r\n        return null\r\n      })\r\n      if (checkers.length > 0) {\r\n          if (checkers.length === 1) {\r\n            if (this.isValidMove(initialPosition, checkers[0].position, type, team, boardState)) {\r\n              if (samePosition(checkers[0].position, desiredPosition)) {\r\n                return false\r\n              }\r\n            }\r\n            return true\r\n          }\r\n        return true\r\n      } else {\r\n        activePiece.position.x = initialPosition.x\r\n        activePiece.position.y = initialPosition.y\r\n        return false\r\n      }\r\n    }\r\n      return true\r\n  }\r\n\r\n  isValidMove(\r\n    initialPosition,\r\n    desiredPosition,\r\n    type,\r\n    team,\r\n    boardState,\r\n    checked\r\n  ) {\r\n    if (desiredPosition !== initialPosition) {\r\n      if ( type === 'pawn') {\r\n        const specialRow = (team === 'ours') ? 6 : 1\r\n        const pawnDirection = (team === 'ours') ? -1: 1\r\n        //MOVEMENT LOGIC\r\n        if (initialPosition.x === desiredPosition.x && initialPosition.y === specialRow && desiredPosition.y - initialPosition.y === 2*pawnDirection) {\r\n          if (!this.tileIsOccupied(desiredPosition,boardState) &&\r\n          (!this.tileIsOccupied({x: desiredPosition.x, y: desiredPosition.y -pawnDirection}, boardState))) {\r\n            return true\r\n          }\r\n        } else if (initialPosition.x === desiredPosition.x && desiredPosition.y - initialPosition.y === pawnDirection) {\r\n          if (!this.tileIsOccupied(desiredPosition,boardState)) {\r\n            return true\r\n          }\r\n        }\r\n      //ATTACK LOGIC\r\n        else if (desiredPosition.x - initialPosition.x === -1 && desiredPosition.y -initialPosition.y === pawnDirection) {\r\n          if (this.tileIsOccupiedByOpponent(desiredPosition,boardState, team)) {\r\n            return true\r\n            }\r\n          }\r\n        else if (desiredPosition.x - initialPosition.x === 1 && desiredPosition.y - initialPosition.y === pawnDirection) {\r\n          if (this.tileIsOccupiedByOpponent(desiredPosition,boardState, team)) {\r\n            return true\r\n            }\r\n        }\r\n      } else if (type === 'knight') {\r\n        //moving logic for knight\r\n        //8 different moving patterns\r\n        for (let i = -1; i < 2; i+=2) {\r\n          for (let j = -1; j < 2; j+=2) {\r\n            //TOP AND BOTTOM SIDE MOVEMENT\r\n            if (desiredPosition.y - initialPosition.y === 2 * i) {\r\n              if (desiredPosition.x - initialPosition.x === j) {\r\n                if (!this.tileIsOccupied(desiredPosition, boardState)\r\n                  || this.tileIsOccupiedByOpponent(desiredPosition, boardState, team)\r\n                  ) {\r\n                    return true\r\n                }\r\n              }\r\n            }\r\n            //RIGHT AND LEFT SIDE MOVEMENT\r\n            if (desiredPosition.x - initialPosition.x === 2 * i) {\r\n              if (desiredPosition.y - initialPosition.y === j) {\r\n                if (!this.tileIsOccupied(desiredPosition, boardState)\r\n                  || this.tileIsOccupiedByOpponent(desiredPosition, boardState, team)\r\n                  ) {\r\n                    return true\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else if (type === 'bishop') {\r\n        //MOVEMENT AND ATTATCK LOGIC FOR BISHOP\r\n        for ( let i = 1; i < 8; i++) {\r\n          //BOTTOM RIGHT MOVEMENT\r\n          if (desiredPosition.x > initialPosition.x && desiredPosition.y > initialPosition.y) {\r\n            let passedPosition = { x:initialPosition.x + i, y:initialPosition.y + i}\r\n            if (samePosition(passedPosition, desiredPosition)) {\r\n              if (this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                return true\r\n              }\r\n            } else {\r\n                if (this.tileIsOccupied(passedPosition, boardState)) {\r\n                  break;\r\n                }\r\n            }\r\n          }\r\n          //UPPER RIGHT MOVEMENT\r\n          if (desiredPosition.x > initialPosition.x && desiredPosition.y < initialPosition.y) {\r\n            let passedPosition = {x:initialPosition.x+ i, y: initialPosition.y - i}\r\n            if (samePosition(passedPosition, desiredPosition)) {\r\n              if (this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                return true\r\n              }\r\n            } else {\r\n                if (this.tileIsOccupied(passedPosition, boardState)) {\r\n                  break;\r\n                }\r\n              }\r\n           }\r\n\r\n          //BOTTOM LEFT MOVEMENT\r\n          if (desiredPosition.x < initialPosition.x && desiredPosition.y > initialPosition.y) {\r\n            let passedPosition = {x:initialPosition.x - i, y: initialPosition.y + i}\r\n            if (samePosition(passedPosition, desiredPosition)) {\r\n              if (this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                return true\r\n              }\r\n            } else {\r\n              if (this.tileIsOccupied(passedPosition, boardState)) {\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          //UPPER LEFT MOVEMENT\r\n          if (desiredPosition.x < initialPosition.x && desiredPosition.y < initialPosition.y) {\r\n            let passedPosition = {x:initialPosition.x - i, y: initialPosition.y - i}\r\n            if (samePosition(passedPosition, desiredPosition)) {\r\n              if (this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                return true\r\n              }\r\n            } else {\r\n                if (this.tileIsOccupied(passedPosition, boardState)) {\r\n                  break;\r\n                }\r\n            }\r\n          }\r\n        }\r\n      } else if (type === 'rook') {\r\n        if (initialPosition.x === desiredPosition.x) {\r\n          for (let i = 1; i < 8; i++) {\r\n            let multiplier = (desiredPosition.y < initialPosition.y) ? -1 : 1\r\n            let passedPosition = {x: initialPosition.x, y: initialPosition.y + (i * multiplier)}\r\n            if (samePosition(passedPosition, desiredPosition)) {\r\n              if (this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                return true\r\n              }\r\n            } else if (this.tileIsOccupied(passedPosition, boardState)) {\r\n                break;\r\n            }\r\n          }\r\n        }\r\n        if (initialPosition.y === desiredPosition.y) {\r\n          for (let i = 1; i < 8; i++) {\r\n            let multiplier = (desiredPosition.x < initialPosition.x) ? -1: 1\r\n            let passedPosition = { x:initialPosition.x + (i * multiplier), y: initialPosition.y}\r\n            if (samePosition(passedPosition, desiredPosition)) {\r\n              if (this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                return true\r\n              }\r\n            } else if (this.tileIsOccupied(passedPosition, boardState)) {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      } else if (type === 'queen') {\r\n        for (let i = 1; i < 8; i++) {\r\n          let multiplierX = (desiredPosition.x < initialPosition.x) ?  -1 : (desiredPosition.x > initialPosition.x) ? 1 :0\r\n          let multiplierY = (desiredPosition.y < initialPosition.y) ? -1 : (desiredPosition.y > initialPosition.y) ? 1 : 0\r\n          let passedPosition = {x: initialPosition.x + (i * multiplierX), y: initialPosition.y + (i * multiplierY)}\r\n          if (samePosition(passedPosition, desiredPosition)) {\r\n            if (this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n              return true\r\n            }\r\n          } else if (this.tileIsOccupied(passedPosition, boardState)) {\r\n            break;\r\n          }\r\n        }\r\n      } else if (type === 'king') {\r\n        let multiplierX = (desiredPosition.x < initialPosition.x) ? -1 : (desiredPosition.x > initialPosition.x) ? 1 : 0\r\n        let multiplierY = (desiredPosition.y < initialPosition.y) ? -1 : (desiredPosition.y > initialPosition.y) ? 1 : 0\r\n        let passedPosition = {x: initialPosition.x + (multiplierX), y: initialPosition.y + multiplierY}\r\n        if (checked === false) {\r\n          if (samePosition(passedPosition, desiredPosition)) {\r\n            if (this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n              return true\r\n            }\r\n          } else if (this.tileIsOccupied(passedPosition, boardState)) {\r\n              return false\r\n          }\r\n        }\r\n         else if (checked === true) {\r\n          if (this.tileIsSafe(passedPosition, boardState, team)) {\r\n            if (samePosition(passedPosition, desiredPosition)) {\r\n              if (this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                 return true\r\n             } else if (this.tileIsOccupied(passedPosition, boardState)) {\r\n               return false\r\n             }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  }\r\n}\r\n","import React, { useRef, useState } from 'react'\r\nimport Tile from './Tile'\r\nimport Referee from '../referee.js'\r\nimport {\r\n  HORIZONTAL,\r\n  VERTICAL,\r\n  GRIDSIZE,\r\n  initialBoardState,\r\n  samePosition,\r\n } from '../Constants.js'\r\nimport Alert from 'react-popup-alert'\r\n\r\nconst container = {\r\n  display: 'flex',\r\n  border: 'solid',\r\n  borderColor: 'black',\r\n  borderWidth: '2',\r\n  flexWrap: 'wrap',\r\n  width: '560px',\r\n}\r\n\r\nconst Chessboard = ()=> {\r\n  let board = []\r\n  const [activePiece, setActivePiece] = useState(null)\r\n  const [pieces, setPieces] = useState(initialBoardState)\r\n  const [grabPosition, setGrabPosition] = useState({x:-1, y: -1})\r\n  const [turn, setTurn] = useState('opponent')\r\n  const [alert, setAlert] = useState({\r\n    type: '',\r\n    text: 'alert message',\r\n    show: false,\r\n  })\r\n  const chessboardRef = useRef(null)\r\n  const referee = new Referee()\r\n\r\n  const grabPiece= (e)=> {\r\n    const element = e.target\r\n    if (element.classList.contains('chess-piece')) {\r\n      const chessboard = chessboardRef.current\r\n      const grabX = Math.floor((e.clientX - chessboard.offsetLeft)/GRIDSIZE)\r\n      const grabY = Math.floor((e.clientY - chessboard.offsetTop)/GRIDSIZE)\r\n      setGrabPosition({x: grabX, y: grabY})\r\n      const x = e.clientX - GRIDSIZE / 2\r\n      const y = e.clientY - GRIDSIZE / 2\r\n      element.style.position = 'absolute'\r\n      element.style.left = `${x}px`\r\n      element.style.top = `${y}px`\r\n      setActivePiece(element)\r\n    }\r\n  }\r\n\r\n  const movePiece = (e)=> {\r\n    const chessboard = chessboardRef.current\r\n      if (activePiece && chessboard) {\r\n        const x = e.clientX - GRIDSIZE / 2\r\n        const y = e.clientY - GRIDSIZE / 2\r\n        const minX = chessboard.offsetLeft - 25\r\n        const minY = chessboard.offsetTop - 20\r\n        const maxX = minX + chessboard.clientWidth - 25\r\n        const maxY = minY + chessboard.clientHeight - 40\r\n        activePiece.style.position = 'absolute';\r\n\r\n        if (x < minX) {\r\n          activePiece.style.left = `${minX}px`\r\n        }\r\n        else if (x > maxX) {\r\n          activePiece.style.left = `${maxX}px`\r\n        }\r\n        else {\r\n          activePiece.style.left = `${x}px`\r\n        }\r\n\r\n        if (y < minY) {\r\n          activePiece.style.top = `${minY}px`\r\n        }\r\n        else if (y > maxY) {\r\n          activePiece.style.top = `${maxY}px`\r\n        }\r\n        else {\r\n          activePiece.style.top = `${y}px`\r\n        }\r\n\r\n      }\r\n  }\r\n\r\n  const dropPiece = (e)=> {\r\n    const chessboard = chessboardRef.current\r\n    if(activePiece && chessboard) {\r\n      const x = Math.floor((e.clientX - chessboard.offsetLeft)/GRIDSIZE)\r\n      const y = Math.floor((e.clientY - chessboard.offsetTop)/GRIDSIZE)\r\n      const currentPiece = pieces.find(p=> samePosition(p.position, grabPosition))\r\n      if (currentPiece.team === turn) {\r\n        if (currentPiece) {\r\n\r\n          const isCastle = referee.isCastle(\r\n            grabPosition,\r\n            {x,y},\r\n            pieces,\r\n            currentPiece.team,\r\n            currentPiece.type,\r\n            currentPiece.checked\r\n          )\r\n\r\n          const isEnPassant = referee.isEnPassantMove(\r\n            grabPosition,\r\n            {x, y},\r\n            pieces,\r\n            currentPiece.team,\r\n            currentPiece.type\r\n          )\r\n\r\n          const isPromotion = referee.isPromotion(\r\n            grabPosition,\r\n            {x,y},\r\n            pieces,\r\n            currentPiece.team,\r\n            currentPiece.type\r\n          )\r\n\r\n          const isCheck = referee.isCheck(\r\n              grabPosition,\r\n              {x,y},\r\n              pieces,\r\n              currentPiece.team,\r\n              currentPiece.type\r\n          )\r\n\r\n          const isSelfCheck = referee.isSelfCheck(\r\n            grabPosition,\r\n            {x,y},\r\n            pieces,\r\n            currentPiece.team,\r\n            currentPiece.type,\r\n            currentPiece.checked\r\n          )\r\n\r\n          const isCheckMate = referee.isCheckMate(\r\n            grabPosition,\r\n            {x,y},\r\n            pieces,\r\n            currentPiece.team,\r\n            currentPiece.type\r\n          )\r\n\r\n          const validMove = referee.isValidMove(\r\n            grabPosition,\r\n            {x, y},\r\n            currentPiece.type,\r\n            currentPiece.team,\r\n            pieces,\r\n            currentPiece.checked\r\n          )\r\n\r\n          const pawnDirection = currentPiece.team === 'ours' ? -1: 1\r\n\r\n          if (isCastle) {\r\n            const side= x - grabPosition.x === -2 ? 0 : 7\r\n              const updatedPieces = pieces.reduce((results, piece)=> {\r\n                if (piece.team === currentPiece.team && piece.type === 'king') {\r\n                  piece.position.x = x\r\n                  piece.castle = false\r\n                  results.push(piece)\r\n                } else if (piece.team === currentPiece.team && piece.type === 'rook' && piece.position.x === side) {\r\n                  if (side > 0) {\r\n                    piece.position.x = x -1\r\n                    piece.castle = false\r\n                    results.push(piece)\r\n                  } else {\r\n                  piece.position.x = x + 1\r\n                  piece.castle = false\r\n                  results.push(piece) }\r\n                }\r\n                results.push(piece)\r\n                return results\r\n              }, [])\r\n              setPieces(updatedPieces)\r\n              setTurn(turn === 'opponent' ? 'ours' : 'opponent')\r\n          }\r\n\r\n          if (isCheck) {\r\n            const updatedPieces = pieces.reduce((results, piece)=> {\r\n              if (piece.team !== currentPiece.team && piece.type === 'king') {\r\n                piece.castle = false\r\n                piece.check = true\r\n                results.push(piece)\r\n              }\r\n              return results\r\n            }, [])\r\n            setPieces(updatedPieces)\r\n            setTurn(turn === 'opponent' ? 'ours': 'opponent')\r\n          }\r\n\r\n          if (isCheckMate) {\r\n            onShowAlert()\r\n          }\r\n\r\n          if (isPromotion) {\r\n            const updatedPieces = pieces.reduce((results, piece)=> {\r\n              if (samePosition(piece.position, grabPosition)) {\r\n                piece.type = 'queen'\r\n                piece.source = (currentPiece.team === 'ours') ? `${process.env.PUBLIC_URL}/assets/Chess_qdt60.png` : `${process.env.PUBLIC_URL}/assets/Chess_qlt60.png`\r\n                results.push(piece)\r\n              }\r\n              return results\r\n            }, [])\r\n            setPieces(updatedPieces)\r\n            setTurn(turn === 'opponent' ? 'ours': 'opponent')\r\n          }\r\n\r\n          if (isEnPassant) {\r\n            const updatedPieces = pieces.reduce((results, piece)=> {\r\n              if (samePosition(piece.position, grabPosition)) {\r\n                piece.enPassant = false\r\n                piece.position.x = x\r\n                piece.position.y = y\r\n                results.push(piece)\r\n              } else if (!samePosition(piece.position, {x, y: y-pawnDirection})) {\r\n                if (piece.type === 'pawn') {\r\n                  piece.enPassant =  false\r\n                }\r\n                results.push(piece)\r\n              }\r\n              return results\r\n            },[])\r\n            setPieces(updatedPieces)\r\n            setTurn(turn === 'opponent' ? 'ours': 'opponent')\r\n\r\n          }\r\n          //REDUCE FUNCTION\r\n          else if (validMove && !isSelfCheck) {\r\n            const updatedPieces = pieces.reduce((results, piece) => {\r\n              if (piece.team === currentPiece.team && piece.type === 'king') {\r\n                piece.checked = false\r\n                results.push(piece)\r\n              }\r\n              if (samePosition(piece.position, grabPosition)) {\r\n                piece.enPassant = Math.abs(grabPosition.y - y) === 2 && piece.type === 'pawn'\r\n                piece.position.x = x\r\n                piece.position.y = y\r\n                results.push(piece);\r\n              }\r\n              else if (!samePosition(piece.position, {x,y})) {\r\n                if (piece.type === 'pawn') {\r\n                  piece.enPassant = false\r\n                }\r\n                results.push(piece);\r\n              }\r\n              return results\r\n            }, [])\r\n            setPieces(updatedPieces)\r\n            setTurn(turn === 'opponent' ? 'ours': 'opponent')\r\n          } else {\r\n            activePiece.style.position = 'relative'\r\n            activePiece.style.removeProperty('top')\r\n            activePiece.style.removeProperty('left')\r\n          }\r\n        }\r\n        //UPDATES PIECE POSITION\r\n        setPieces((value)=> {\r\n          const pieces = value.map(p=> {\r\n            if (samePosition(p.position, grabPosition)) {\r\n              const validMove = referee.isValidMove(\r\n                grabPosition,\r\n                {x, y},\r\n                p.type,\r\n                p.team,\r\n                value,\r\n              )\r\n\r\n              const isSelfCheck = referee.isSelfCheck(\r\n                grabPosition,\r\n                {x,y},\r\n                value,\r\n                currentPiece.team,\r\n                currentPiece.type,\r\n              )\r\n\r\n              if (validMove && !isSelfCheck) {\r\n                p.position.x = x\r\n                p.position.y = y\r\n              } else {\r\n              activePiece.style.position = 'relative'\r\n              activePiece.style.removeProperty('top')\r\n              activePiece.style.removeProperty('left')\r\n            }\r\n          }\r\n          return p\r\n        })\r\n          return pieces\r\n        })\r\n        setActivePiece(null)\r\n      } else {\r\n        activePiece.style.position = 'relative'\r\n        activePiece.style.removeProperty('top')\r\n        activePiece.style.removeProperty('left')\r\n        setActivePiece(null)\r\n      }\r\n    }\r\n  }\r\n\r\n  const onCloseAlert = () => {\r\n    setAlert({\r\n      type: '',\r\n      text: '',\r\n      show: false,\r\n    })\r\n    window.location.reload()\r\n  }\r\n\r\n  const onShowAlert = () => {\r\n    const winner = turn === 'opponent' ? 'Light' : 'Dark'\r\n      setAlert({\r\n        type: '',\r\n        text: `Checkmate! ${winner} wins!`,\r\n        show: true\r\n      })\r\n  }\r\n\r\n    HORIZONTAL.map((h, hIndex)=> {\r\n    VERTICAL.map((v, vIndex)=> {\r\n      const sum = vIndex + hIndex\r\n      const piece = pieces.find(p=> samePosition(p.position, {x: vIndex, y: hIndex}))\r\n      let image = piece ? piece.source : undefined\r\n      board.push(<Tile image={image} key={`${vIndex}, ${hIndex}`} number={sum} />)\r\n      return null\r\n    })\r\n    return null\r\n  })\r\n\r\n  return (\r\n    <div style={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        maxHeight: '100%'}}>\r\n      <div>{turn === 'ours' ? 'Dark': 'Light'}</div>\r\n      <div\r\n        onMouseDown={e=> grabPiece(e)}\r\n        onMouseMove={e=> movePiece(e)}\r\n        onMouseUp={e=> dropPiece(e)}\r\n        ref={chessboardRef}\r\n        style={container}>\r\n        {board}\r\n      </div>\r\n      <Alert\r\n        header={'Header'}\r\n        btnText={'Close'}\r\n        text={alert.text}\r\n        type={alert.type}\r\n        show={alert.show}\r\n        onClosePress={onCloseAlert}\r\n        pressCloseOnOutsideClick={true}\r\n        showBorderBottom={true}\r\n        alertStyles={{\r\n          backgroundColor: 'white',\r\n          border: 'solid black 5px',\r\n          position: 'absolute',\r\n          top: '10%',\r\n          right: '25%',\r\n          width: '50%'\r\n        }}\r\n        headerStyles={{}}\r\n        textStyles={{}}\r\n        buttonStyles={{}}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nexport default Chessboard\r\n","import './App.css';\nimport Chessboard from './components/Chessboard'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chessboard/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}